{"ast":null,"code":"import allList from './rootAllList';\nexport const getNav = info => {\n  return new Promise((resolve, eject) => {\n    let ids = info.rootIds;\n    let result = [];\n    allList.forEach((item, index) => {\n      // 一维存在直接添加\n      if (ids.indexOf(item.id) !== -1) {\n        result.push(item); // 对二维进行判断\n      } else if (ids.indexOf(item.id) === -1 && item.children) {\n        // 遍历二维\n        let child = [];\n        item.children.forEach((citem, cindex) => {\n          // 二维存在\n          if (ids.indexOf(citem.id) !== -1) {\n            child.push(citem);\n          }\n        });\n        item.children = child;\n        result.push(item);\n      }\n    });\n    resolve(result);\n  });\n}; // 拿到数据\n// 拿到鉴权\n// 新建数组-处理完返回\n// 一维数组 id符合unshift到主数组\n// 如果有二维 查看二维id 如果符合，重谢这个二维数组，将这一项添加到主数组\n// 递归","map":{"version":3,"sources":["D:/三阶段/黄骏建-23-三阶段/甲/fffff/admin/src/components/Asider/asiderFun.js"],"names":["allList","getNav","info","Promise","resolve","eject","ids","rootIds","result","forEach","item","index","indexOf","id","push","children","child","citem","cindex"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,eAApB;AAEA,OAAO,MAAMC,MAAM,GAAIC,IAAD,IAAU;AAC5B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACnC,QAAIC,GAAG,GAAGJ,IAAI,CAACK,OAAf;AACA,QAAIC,MAAM,GAAG,EAAb;AACAR,IAAAA,OAAO,CAACS,OAAR,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7B;AACA,UAAIL,GAAG,CAACM,OAAJ,CAAYF,IAAI,CAACG,EAAjB,MAAyB,CAAC,CAA9B,EAAiC;AAC7BL,QAAAA,MAAM,CAACM,IAAP,CAAYJ,IAAZ,EAD6B,CAE7B;AACH,OAHD,MAGO,IAAIJ,GAAG,CAACM,OAAJ,CAAYF,IAAI,CAACG,EAAjB,MAAyB,CAAC,CAA1B,IAA+BH,IAAI,CAACK,QAAxC,EAAkD;AACrD;AACA,YAAIC,KAAK,GAAG,EAAZ;AACAN,QAAAA,IAAI,CAACK,QAAL,CAAcN,OAAd,CAAsB,CAACQ,KAAD,EAAQC,MAAR,KAAmB;AACrC;AACA,cAAIZ,GAAG,CAACM,OAAJ,CAAYK,KAAK,CAACJ,EAAlB,MAA0B,CAAC,CAA/B,EAAkC;AAC9BG,YAAAA,KAAK,CAACF,IAAN,CAAWG,KAAX;AACH;AACJ,SALD;AAMAP,QAAAA,IAAI,CAACK,QAAL,GAAgBC,KAAhB;AACAR,QAAAA,MAAM,CAACM,IAAP,CAAYJ,IAAZ;AACH;AACJ,KAjBD;AAkBAN,IAAAA,OAAO,CAACI,MAAD,CAAP;AACH,GAtBM,CAAP;AAuBH,CAxBM,C,CA0BP;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import allList from './rootAllList'\r\n\r\nexport const getNav = (info) => {\r\n    return new Promise((resolve, eject) => {\r\n        let ids = info.rootIds\r\n        let result = []\r\n        allList.forEach((item, index) => {\r\n            // 一维存在直接添加\r\n            if (ids.indexOf(item.id) !== -1) {\r\n                result.push(item)\r\n                // 对二维进行判断\r\n            } else if (ids.indexOf(item.id) === -1 && item.children) {\r\n                // 遍历二维\r\n                let child = []\r\n                item.children.forEach((citem, cindex) => {\r\n                    // 二维存在\r\n                    if (ids.indexOf(citem.id) !== -1) {\r\n                        child.push(citem)\r\n                    }\r\n                })\r\n                item.children = child\r\n                result.push(item)\r\n            }\r\n        })\r\n        resolve(result)\r\n    })\r\n}\r\n\r\n// 拿到数据\r\n// 拿到鉴权\r\n// 新建数组-处理完返回\r\n// 一维数组 id符合unshift到主数组\r\n// 如果有二维 查看二维id 如果符合，重谢这个二维数组，将这一项添加到主数组\r\n// 递归"]},"metadata":{},"sourceType":"module"}